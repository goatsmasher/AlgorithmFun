class Node {
	constructor(value) {
		this.value = value;
		this.next = null;
		this.previous = null;
	}
}

class DoubleLinkedList {
	constructor() {
		this.head = null;
		this.tail = null;
		this.count = 0;
	}
	addToBack(val) {
		const nodeToAdd = new Node(val);

		if (!this.head) {
			this.head = nodeToAdd;
			this.tail = this.head;
		}
		else {
			this.tail.next = nodeToAdd;
			nodeToAdd.previous = this.tail;
			this.tail = nodeToAdd;
		}
		this.increaseCount();
	}
	addToFront(val) {
		const nodeToAdd = new Node(val);

		if (!this.head) {
			this.head = nodeToAdd;
			this.tail = this.head;
		}
		else {
			this.head.previous = nodeToAdd;
			nodeToAdd.next = this.head;
			this.head = nodeToAdd;
		}
		this.increaseCount();
	}
	removeFromFront() {
		if (this.count > 1) {
			this.head.next.previous = null;
			this.head = this.head.next;
			this.decreaseCount();
		}
		else {
			this.head = null;
			this.tail = null;
			this.count = 0;
			console.log("nothing left");
		}
	}
	removeFromBack() {
		if (this.count > 1) {
			this.tail.previous.next = null;
			this.tail = this.tail.previous;
			this.decreaseCount();
		}
		else {
			this.head = null;
			this.tail = null;
			this.count = 0;
		}
	}
	remove(val) {
		if (this.count > 0) {
			if (this.tail.value === val) {
				this.removeFromBack();
			}
			else {
				let current = this.head;
				while (current) {
					if (current.value === val) {
						current.previous.next = current.next;
						current.next.previous = current.previous;
						this.decreaseCount();
						break;
					}
					else {
						current = current.next;
					}
				}
			}
			return true;
		}
		return false;
	}
	increaseCount() {
		return this.count += 1;
	}
	decreaseCount() {
		return this.count -= 1;
	}
	contains(val) {
		if (this.count === 0) {
			return false;
		}
		else {
			let current = this.head;
			while (current) {
				if (current.value === val) {
					return true;
				}
				else {
					current = current.next;
				}
			}
			return false;
		}
	}
	createCircle() {
		const start = this.head;
		let current = start;
		while (current.next) {
			current = current.next;
		}
		current.next = start;
	}
	show() {
		console.log(this.head);
		console.log("Size: ", this.count);
	}
}function mergeLinkedLists(list1, list2) {
	if (list1 === null) {
		return list2;
	}
	if (list2 === null) {
		return list1;
	}
	if (list1.value < list2.value) {
		list1.next = mergeLinkedLists(list1.next, list2)
		return list1;
	}
	else {
		list2.next = mergeLinkedLists(list2.next, list1);
		return list2;
	}
}


DoubleLinkedList.prototype.isCircular = function () {
	if (this.head.next) {
		let runner = this.head;
		let jumper = this.head.next;
		while (jumper) {
			if (runner === jumper) {
				return true;
			}
			runner = runner.next;
			jumper = jumper.next.next;
		}
	}
	return false;
};
